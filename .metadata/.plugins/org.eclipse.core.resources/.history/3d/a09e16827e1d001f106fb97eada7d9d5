package com.company.controller;

import java.io.File;
import java.io.IOException;
import java.util.UUID;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import com.company.dto.Product;
import com.company.service.ProductService;

@Controller
@RequestMapping("/product/")
public class ProductController {

    private static final Logger log = LoggerFactory.getLogger(ProductController.class);

    @Autowired
    private ProductService productService;

    @Autowired
    private String uploadLoc = "/resources/upload";

    @RequestMapping("ProductListAll.do")
    public String getProductListAll(Model model) {
        model.addAttribute("list", productService.getProductList());
        return "product/productList";
    }

    @RequestMapping("productList.do")
    public String getProductCateList(@RequestParam("cate") String cate, Model model) {
        model.addAttribute("productList", productService.getProductCateList(cate));
        return "product/productList";
    }

    @RequestMapping("getProduct.do")
    public String getProduct(@RequestParam("pno") int pno, Model model) {
        model.addAttribute("product", productService.getProduct(pno));
        return "product/getProduct";
    }

    @GetMapping("insProduct.do")
    public String insProduct(Product product, Model model) {
        return "product/insProduct";
    }

    @PostMapping("insProductPro.do")
    public String insProductPro(@RequestParam("cate") String cate,
                                @RequestParam("pname") String pname,
                                @RequestParam("com") String com,
                                @RequestParam("price") int price,
                                @RequestParam("img") MultipartFile img,
                                @RequestParam("img2") MultipartFile img2,
                                @RequestParam("img3") MultipartFile img3, 
                                HttpServletRequest request, HttpServletResponse response, Model model) {

        String uploadDir = request.getServletContext().getRealPath(uploadLoc);
        if (uploadDir == null) {
            log.error("Upload directory path is null.");
            return "error";
        }

        File dir = new File(uploadDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }

        String imgName = saveFile(img, uploadDir, "img");
        String img2Name = saveFile(img2, uploadDir, "img2");
        String img3Name = saveFile(img3, uploadDir, "img3");

        if (imgName == null || img2Name == null || img3Name == null) {
            log.error("One or more files failed to upload.");
            return "error";
        }

        Product product = new Product();
        product.setCate(cate);
        product.setPname(pname);
        product.setCom(com);
        product.setImg(imgName);
        product.setImg2(img2Name);
        product.setImg3(img3Name);

        productService.insProduct(product);
        return "redirect:/product/productList.do";
    }

    private String saveFile(MultipartFile file, String uploadDir, String fileLabel) {
        if (file == null || file.isEmpty()) {
            log.warn("File {} is null or empty", fileLabel);
            return null;
        }

        try {
            String originalFilename = file.getOriginalFilename();
            if (originalFilename == null) {
                log.error("Original filename is null for file {}", fileLabel);
                return null;
            }

            String newFilename = UUID.randomUUID().toString() + "_" + originalFilename;
            File serverFile = new File(uploadDir, newFilename);
            file.transferTo(serverFile);
            return newFilename;
        } catch (IOException e) {
            log.error("Error saving file {}: {}", fileLabel, e.getMessage());
            return null;
        }
    }

    @GetMapping("upProduct.do")
    public String upProduct(@RequestParam("pno") int pno, Model model) {
        model.addAttribute("product", productService.getProduct(pno));
        return "product/editProduct";
    }

    @PostMapping("upProductPro.do")
    public String upProductPro(@RequestParam("pno") int pno,
                               @RequestParam("cate") String cate,
                               @RequestParam("pname") String pname,
                               @RequestParam("com") String com,
                               @RequestParam("price") int price,
                               @RequestParam("img") MultipartFile img,
                               @RequestParam("img2") MultipartFile img2,
                               @RequestParam("img3") MultipartFile img3, 
                               HttpServletRequest request, HttpServletResponse response, Model model) {

        Product before = productService.getProduct(pno);

        String uploadDir = request.getServletContext().getRealPath(uploadLoc);
        if (uploadDir == null) {
            log.error("Upload directory path is null.");
            return "error";
        }

        File dir = new File(uploadDir);
        if (!dir.exists()) {
            dir.mkdirs();
        }

        String imgName = saveFile(img, uploadDir, "img");
        String img2Name = saveFile(img2, uploadDir, "img2");
        String img3Name = saveFile(img3, uploadDir, "img3");

        if (imgName == null) {
            imgName = before.getImg();
        }
        if (img2Name == null) {
            img2Name = before.getImg2();
        }
        if (img3Name == null) {
            img3Name = before.getImg3();
        }

        Product product = new Product();
        product.setCate(cate);
        product.setPname(pname);
        product.setCom(com);
        product.setImg(imgName);
        product.setImg2(img2Name);
        product.setImg3(img3Name);

        productService.upProduct(product);
        return "redirect:/product/productList.do";
    }

    @RequestMapping("delProduct.do")
    public String delProduct(@RequestParam("pno") int pno, Model model) {
        productService.delProduct(pno);
        return "redirect:/product/productList.do";
    }
}


/*
package com.company.controller;

import java.io.File;
import java.io.IOException;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.company.dto.Product;
import com.company.service.ProductService;

@Controller
@RequestMapping("/product/")
public class ProductController {
	
	private static final Logger log = LoggerFactory.getLogger(ProductController.class);
	
	@Autowired
	private ProductService productService;
	
	@Autowired
	private String uploadLoc = "/resources/upload";
	
	@RequestMapping("ProductListAll.do")
	public String getProductListAll(Model model) {
		model.addAttribute("list", productService.getProductList());
		return "product/productList";
	}
	
	@RequestMapping("productList.do")
	public String getProductCateList(@RequestParam("cate") String cate, Model model) {
		model.addAttribute("productList", productService.getProductCateList(cate));
		return "product/productList";
	}
	@RequestMapping("getProduct.do")
	public String getProduct(@RequestParam("pno")int pno, Model model) {
		model.addAttribute("product", productService.getProduct(pno));
		return "product/getProduct";
	} 
	@GetMapping("insProduct.do")
	public String insProduct(Product product, Model model) {
		return "product/insProduct";
	}
	
	@PostMapping("insProductPro.do")
	public String insProductPro(@RequestParam("cate") String cate,
			@RequestParam("pname") String pname,
			@RequestParam("com") String com,
			@RequestParam("price") int price,
			@RequestParam("img") MultipartFile img,
			@RequestParam("img2") MultipartFile img2,
			@RequestParam("img3") MultipartFile img3, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		
		String uploadDir = request.getServletContext().getRealPath(uploadLoc);
		File dir = new File(uploadDir);
		
		String imgName="", img2Name="", img3Name="";
		
		if(!dir.exists()) {
			dir.mkdirs();
		}
		
		try {
			if(!img.isEmpty()) {
				imgName = saveFile(img, uploadDir);
				log.info("업로드 파일1 이름 : {}", imgName);
			}
			if(!img2.isEmpty()) {
				img2Name = saveFile(img2, uploadDir);
				log.info("업로드 파일2 이름 : {}", img2Name);
			}
			if(!img3.isEmpty()) {
				img3Name = saveFile(img3, uploadDir);
				log.info("업로드 파일3 이름 : {}", img3Name);
			}
		} catch (IOException e) {
			log.error("예외 : {}", e);
		}
		
		Product product = new Product();
		product.setCate(cate);
		product.setPname(pname);
		product.setCom(com);
		product.setImg(imgName);
		product.setImg2(img2Name);
		product.setImg3(img3Name);
		
		productService.insProduct(product);
		return "redirect:/product/productList.do";
	}
	public String saveFile(MultipartFile file, String uploadDir) throws IOException {
		String originalFilename = file.getOriginalFilename();
		String newFilename = UUID.randomUUID().toString() + "_" + originalFilename;
		File serverFile = new File(uploadDir + newFilename);
		file.transferTo(serverFile);
		return newFilename;
	}

	@GetMapping("upProduct.do")
	public String upProduct(@RequestParam("pno") int pno,
			@RequestParam("cate") String cate,
			@RequestParam("pname") String pname,
			@RequestParam("com") String com,
			@RequestParam("price") int price,
			@RequestParam("img") MultipartFile img,
			@RequestParam("img2") MultipartFile img2,
			@RequestParam("img3") MultipartFile img3, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		
		model.addAttribute("product", productService.getProduct(pno));
		return "product/editProduct";
	}
	
	@PostMapping("upProductPro.do")
	public String upProductPro(@RequestParam("pno") int pno,
			@RequestParam("cate") String cate,
			@RequestParam("pname") String pname,
			@RequestParam("com") String com,
			@RequestParam("price") int price,
			@RequestParam("img") MultipartFile img,
			@RequestParam("img2") MultipartFile img2,
			@RequestParam("img3") MultipartFile img3, HttpServletRequest request,
			HttpServletResponse response, Model model) {
		
		Product before = productService.getProduct(pno);
		
		String uploadDir = request.getServletContext().getRealPath(uploadLoc);
		File dir = new File(uploadDir);
		
		String imgName="", img2Name="", img3Name="";
		
		if(!dir.exists()) {
			dir.mkdirs();
		}
		
		try {
			if(!img.isEmpty()) {
				imgName = saveFile(img, uploadDir);
				log.info("변경 파일1 이름 : {}", imgName);
			} else {
				imgName = before.getImg();
			}
			if(!img2.isEmpty()) {
				img2Name = saveFile(img2, uploadDir);
				log.info("변경 파일2 이름 : {}", img2Name);
			} else {
				img2Name = before.getImg2();
			}
			if(!img3.isEmpty()) {
				img3Name = saveFile(img3, uploadDir);
				log.info("변경 파일3 이름 : {}", img3Name);
			} else {
				imgName = before.getImg3();
			}
		} catch (IOException e) {
			log.error("예외 : {}", e);
		}
		
		Product product = new Product();
		product.setCate(cate);
		product.setPname(pname);
		product.setCom(com);
		product.setImg(imgName);
		product.setImg2(img2Name);
		product.setImg3(img3Name);
		
		productService.upProduct(product);
		return "redirect:product/productList.do";
	}
	
	@RequestMapping("delProduct.do")
	public String delProduct(@RequestParam("pno") int pno, Model model) {
		productService.delProduct(pno);
		return "redirect:productList.do";
	}
	
}
*/