package com.company.controller;

import java.io.IOException;
import java.io.PrintWriter;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.json.simple.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.company.dto.Member;
import com.company.service.MemberService;

@Controller
@RequestMapping("/member/")
public class MemberController {
	
	@Autowired
	private MemberService memberService;
	
	@Autowired
	private HttpSession session;
	
	@GetMapping("login.do")
	public String login(Model model) {
		return "member/login";
	}
    @PostMapping("loginPro.do")
    public String loginPro(@RequestParam("id") String id, @RequestParam("pw") String pw, Model model, RedirectAttributes rttr, HttpServletRequest request) {
        Member member = memberService.getMember(id);

        if (member == null) {
            rttr.addFlashAttribute("msg", "존재하지 않는 아이디입니다.");
            System.out.println("회원 정보를 찾을 수 없습니다.");
            return "redirect:login.do";
        }

        // 로그인 시도 로그 추가
        System.out.println("로그인 시도 - 입력된 비밀번호: " + pw);
        System.out.println("로그인 시도 - 데이터베이스의 암호화된 비밀번호: " + member.getPw());

        boolean loginSuccess = memberService.checkPassword(pw, member.getPw());
        System.out.println("비밀번호 비교 결과: " + loginSuccess);

        if (loginSuccess) {
            HttpSession session = request.getSession(false);
            if (session != null) {
                session.invalidate();
            }
            session = request.getSession(true);
            session.setAttribute("member", member);
            session.setAttribute("sid", id);
            System.out.println("세션에 저장된 member: " + session.getAttribute("member"));
            model.addAttribute("msg", "로그인 성공");
            return "redirect:/";
        } else {
            rttr.addFlashAttribute("msg", "로그인 실패: 비밀번호가 일치하지 않습니다.");
            return "redirect:login.do";
        }
    }
	@GetMapping("logout.do")
	public String logout(Model model, RedirectAttributes rttr) {
		session.invalidate();
		model.addAttribute("msg", "로그아웃 하였습니다.");
		return "redirect:/login.do";
	}
	
	@GetMapping("mypage.do")
	public String myInfo(Model model) {
		return "member/myInfo";
	}
	
	@GetMapping("myUpdate.do")
	public String myUpdate(Model model) {
		return "member/myUpdate";
	}
	
	@PostMapping("myUpdatePro.do")
	public String myUpdatePro(HttpServletRequest request, Model model, RedirectAttributes rttr) {
		Member member = new Member();
		member.setId(request.getParameter("id"));
		member.setPw(pwdEncoder.encode(request.getParameter("pw")));	//비밀번호 암호화
		member.setName(request.getParameter("name"));
		member.setEmail(request.getParameter("email"));
		member.setTel(request.getParameter("tel"));
		member.setAddr1(request.getParameter("addr1"));
		member.setAddr2(request.getParameter("addr2"));
		member.setPostcode(request.getParameter("postcode"));
		memberService.changeInfo(member);
		model.addAttribute("msg", "회원가입을 축하합니다.");
		session.invalidate();
		return "redirect:/";
	}
    
    
    
    @GetMapping("join.do")
    public String join(@ModelAttribute("member") Member member, Model model) {
        model.addAttribute("Member", member);
        return "member/join";
    }
    @PostMapping("joinPro.do")
    public String joinPro(HttpServletRequest request, Model model, RedirectAttributes rttr) {
        Member member = new Member();
        member.setId(request.getParameter("id"));

        String rawPassword = request.getParameter("pw");
        member.setPw(rawPassword);

        member.setName(request.getParameter("name"));

        member.setEmail(request.getParameter("email"));
        //member.setEmail(email);
        	/*
     		String emailbox = request.getParameter("emailbox");
     		String useremail1 = request.getParameter("useremail1");
     		String useremail2 = request.getParameter("useremail2"); 
            // 디버깅용 로그 추가
            System.out.println("emailbox: " + emailbox);
            System.out.println("useremail1: " + useremail1);
            System.out.println("useremail2: " + useremail2);
     		String email;
     		if ("self".equals(emailbox)) {
     		    email = request.getParameter("useremail1") + "@" + useremail2;
     		} else {
     		    email = request.getParameter("useremail1") + "@" + emailbox;
     		}
     		member.setEmail(email);
     		*/

	        
	        member.setTel(request.getParameter("tel"));
	        
	        /*
	        String birth = request.getParameter("year") + "-" + request.getParameter("month") + "-" + request.getParameter("day");
	        member.setBirth(birth);
	        */
	        member.setPostcode(request.getParameter("postcode"));
	//      member.setAddr(request.getParameter("addr"));
	        member.setAddr1( request.getParameter("addr1"));
	        member.setAddr2( request.getParameter("addr2"));
	        
	        
	        memberService.insMember(member);
	        
	        rttr.addFlashAttribute("msg", "회원가입이 완료되었습니다. 다시 로그인 해주세요.");
	        return "redirect:/member/login.do";
    	}
	    @RequestMapping("agree.do")
	    public String agreeForm(Model model, RedirectAttributes rttr) {
	        rttr.addAttribute("msg", "회원 약관에 동의하시기 바랍니다.");
	        return "member/agree";
	    }
	    
	    
	    @PostMapping("idCheck.do")
	    public void idCheck(HttpServletRequest request, HttpServletResponse response, Model model) throws IOException {
	        String id = request.getParameter("id");
	        Member member = memberService.getMember(id);
	        boolean result = (member == null);
	        JSONObject json = new JSONObject();
	        json.put("result", result);
	        PrintWriter out = response.getWriter();
	        out.println(json.toString());
	    }
	    
}
